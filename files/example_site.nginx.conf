
server {

    #enable rewrite log which spams the error log.
    #rewrite_log on;

    #when serving a static file, look for an equivalent .gz version
    #needs compiling into Nginx.
    #gzip_static on;


    #Turn gzip on, including for HTTP1.0 clients (which breaks the connection keep alive)
    gzip  on;
    gzip_http_version 1.0;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_buffers 16 8k;

    #Set what content types are gzipped.
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml;



	# block hack attempts
	if ($args ~* "([a-z0-9]{12,})=([a-z0-9]{12,})" ){
		rewrite / /444_dosattack;
	}

    fastcgi_buffers 8 16k;
	fastcgi_buffer_size 16k;

	#Disable buffering responses that are over CGI buffers size, we have plenty of memory
	fastcgi_max_temp_file_size 0;

    #If these files aren't present, don't fill up the log file
    location = /robots.txt  { access_log off; log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\.          { access_log off; log_not_found off; deny all; }

    #Prevent any temp files created by Vim from being accessible.
    location ~ ~$           { access_log off; log_not_found off; deny all; }

	# ~ nginx performs a regular expression match.
	# ~* removes case sensitivity from the matches
	# ^~) matches literal string and stops processing
	# =) as an argument to location forces an exact match with the path requested and then stops searching for more specific matches. will only match http://ducklington.org/ but not http://ducklington.org/index.html

    listen 80;
    server_name basereality.com *.basereality.com *.test.basereality.com basereality.test *.basereality.test;

    access_log  /opt/local/var/log/nginx/basereality.access.log requestTime;
    error_log  /opt/local/var/log/nginx/basereality.error.log notice;

    root	/documents/projects/intahwebz/intahwebz/basereality;


    #max POST size.
	client_max_body_size 8m;

    #Allow PHP to serve custom error pages
	fastcgi_intercept_errors off;

    #Configure which error pages are served by Nginx
	error_page   404  /404_static.html;
	error_page   500 502 503 504  /50x_static.html;

    #Nginx drops the connection for any request that resolves to this location
    location = /444_dosattack {
        return 444;
    }

    #Serve up a static 404 page
    location = /404_static.html {
        root   /documents/projects/intahwebz/intahwebz/data/html/;
        internal;
    }

    #serve up a static 50x page
    location = /50x_static.html {
        root   /documents/projects/intahwebz/intahwebz/data/html/;
        internal;
    }

    location ~ ^/(www-status)$ {
        include         /documents/projects/intahwebz/intahwebz/conf/fastcgi.conf;
        fastcgi_pass    unix:/opt/local/var/run/php54/php-fpm-www.sock;
        allow 127.0.0.1;
        #Todo - allow by domain
        #allow watchdog.localdomain;
        deny all;
    }

    location ~ ^/(images-status)$ {
        include         /documents/projects/intahwebz/intahwebz/conf/fastcgi.conf;
        fastcgi_pass    unix:/opt/local/var/run/php54/php-fpm-images.sock;
        allow 127.0.0.1;
        #Todo - allow by domain
        #allow watchdog.localdomain;
        deny all;
    }

    # Will serve /documents/projects/intahwebz/intahwebz/var/cache/myfile.tar.gz
    # When passed URI /protected_files/myfile.tar.gz
    location ^~ /protected_files {
        gzip  off;
        internal;
        alias /documents/projects/intahwebz/intahwebz/var/cache;
        #Needed for gzip content encoding header to be sent to client
        add_header Content-Encoding $upstream_http_content_encoding;
    }

    #This is a legacy block, to allow old image URLs to work
    location ~* /proxy/ {
        set $originalURI  $uri;
        try_files $uri /routing.php /50x_static.html;
        fastcgi_param  QUERY_STRING  legacy=true&q=$originalURI&$query_string;

        fastcgi_pass   unix:/opt/local/var/run/php54/php-fpm-images.sock;
        include       /documents/projects/intahwebz/intahwebz/conf/fastcgi.conf;
    }

    #images and other large files are served through the PHP-FPM block
    #php-fpm-images as this is configured to allow large memory usage.
    location ~* /(image|file)/ {
        set $originalURI  $uri;
        try_files $uri /routing.php /50x_static.html;
        fastcgi_param  QUERY_STRING  q=$originalURI&$query_string;

        fastcgi_pass   unix:/opt/local/var/run/php54/php-fpm-images.sock;
        include       /documents/projects/intahwebz/intahwebz/conf/fastcgi.conf;
    }

    #This must be the last regular epxression match
    location ~* ^[^\?\&]+\.(html|jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js)$ {
        try_files $uri /routing.php?file=$1;

        #access_log off;
        expires 24h;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
   }

    #Default location that all actual requests are served through.
    location  / {
        #Most nginx config examples have routing.php as the last `try_files` parameter. This
        #makes nginx actually perform a rewrite for the request to routing.php and perform another
        #round of processing. Avoiding this requires some juggling to maintain the original URI
        #and associated parameters.
        set $originalURI  $uri;
        try_files $uri /routing.php /50x_static.html;
        fastcgi_param  QUERY_STRING  q=$originalURI&$query_string;

        fastcgi_pass   unix:/opt/local/var/run/php54/php-fpm-www.sock;
        include       /documents/projects/intahwebz/intahwebz/conf/fastcgi.conf;
    }
}


